import React, { Component, ReactElement, ReactNode } from "react";
import { bindActionCreators, Dispatch } from "redux";
import { connect } from "react-redux";

import Container from "../dnd/Container";
import Draggable from "../dnd/Draggable";
import Popover from "@terebentina/react-popover";
import Loader from "../Loader";

import Card from "../cards/Card";
import NewCard from "../cards/NewCard";

import {
  AddCardLink,
  LaneFooter,
  LaneHeader,
  RightContent,
  ScrollableLane,
  Section,
  Title
} from "../../styles/Base";

import {
  CollapseBtn,
  DeleteWrapper,
  ExpandBtn,
  GenDelButton,
  LaneMenuContent,
  LaneMenuHeader,
  LaneMenuItem,
  LaneMenuTitle,
  MenuButton
} from "../../styles/Elements";

import uuidv1 from "uuid/v1";

import classNames from "classnames";

import * as actions from "../../store/actions";
import { BoardAction } from "../../store/actions";
import { Item, Lane as DataLane } from "../../store";

import * as R from "ramda";

interface LaneProps {
  overrideAddCardUI?: React.ReactNode,

  dispatch: Dispatch<BoardAction>,
  lane: DataLane,


  laneId: string,
  boardId: string,
  index?: number,

  title?: React.ReactNode,
  label?: string,

  actions?: object,

  laneSortFunction?: (...args: any[]) => any,

  style?: object,
  cardStyle?: object,
  tagStyle?: object,
  titleStyle?: object,
  labelStyle?: object,

  customLaneHeader?: JSX.Element,
  customCardLayout?: boolean,

  cards?: any[],
  currentPage?: number,
  draggable?: boolean,
  collapsibleLanes?: boolean,
  droppable?: boolean,

  onLaneScroll?: (...args: any[]) => any,
  onCardClick?: (...args: any[]) => any,
  onCardDelete?: (...args: any[]) => any,
  onLaneClick?: (...args: any[]) => any,

  newCardTemplate?: React.ReactNode,
  addCardLink?: React.ReactNode,
  addCardTitle?: string,

  editable?: boolean,

  cardDraggable?: boolean,
  cardDragClass?: string,
  canAddLanes?: boolean
}

type LaneState = {
  currentPage: any,
  loading: boolean,
  addCardMode: boolean,
  collapsed: boolean,
  isDraggingOver: boolean
};

class Lane extends Component<LaneProps, LaneState> {
  static defaultProps = {
    style: {},
    titleStyle: {},
    labelStyle: {},
    label: undefined,
    editable: false,
    onCardAdd: () => {}
  };

  state = {
    loading: false,
    currentPage: this.props.currentPage,
    addCardMode: false,
    collapsed: false,
    isDraggingOver: false
  };

  // handleScroll = (evt) => {
  //   const node = evt.target;
  //   const elemScrolPosition =
  //     node.scrollHeight - node.scrollTop - node.clientHeight;
  //   const { onLaneScroll } = this.props;
  //   if (elemScrolPosition <= 0 && onLaneScroll && !this.state.loading) {
  //     const { currentPage } = this.state;
  //     const nextPage = currentPage + 1;
  //     this.setState({ loading: true });
  //     onLaneScroll(nextPage, this.props.laneId).then(moreCards => {
  //       if (!moreCards || moreCards.length === 0) {
  //         // if no cards present, stop retrying until user action
  //         node.scrollTop = node.scrollTop - 100;
  //       } else {
  //         this.props.actions.paginateLane({
  //           laneId: this.props.laneId,
  //           newCards: moreCards,
  //           nextPage: nextPage
  //         });
  //       }
  //       this.setState({ loading: false });
  //     });
  //   }
  // };

  laneDidMount = (node: HTMLElement) => {
    // if (node) node.addEventListener("scroll", this.handleScroll);
  };

  componentWillReceiveProps(nextProps) {
    if (!R.equals(this.props.cards, nextProps.cards)) {
      this.setState({
        currentPage: nextProps.currentPage
      });
    }
  }

  removeCard = (cardId) => {
    this.props.dispatch(actions.deleteItem({
      boardId: this.props.boardId,
      itemId: cardId,
    }));
  };

  handleCardClick = (e, card) => {
    if (this.props.onCardClick) this.props.onCardClick(card.laneId, card.metadata, card.laneId);
    e.stopPropagation();
  };

  showEditableCard = () => this.setState({ addCardMode: true });

  hideEditableCard = () => this.setState({ addCardMode: false });

  addNewCard = (partialItem: { title: string, label: string, description: string }) => {
    this.hideEditableCard();

    const item = new Item(partialItem);

    this.props.dispatch(actions.addItem({
      boardId: this.props.boardId,
      item,
      itemId: uuidv1(),
      laneId: this.props.laneId,
      positionInLane: null
    }));
  };

  renderAddCardLink = () => {
    const { overrideAddCardUI, addCardTitle } = this.props;

    if (overrideAddCardUI) {
      return <span onClick={this.showEditableCard}>{overrideAddCardUI}</span>;
    } else {
      return <AddCardLink onClick={this.showEditableCard}>{addCardTitle}</AddCardLink>
    }
  };

  renderNewCard = () => {
    const { newCardTemplate, laneId } = this.props;
    if (newCardTemplate) {
      const newCardWithProps = React.cloneElement(newCardTemplate, {
        onCancel: this.hideEditableCard,
        onAdd: this.addNewCard,
        laneId: laneId
      });
      return <span>{newCardWithProps}</span>;
    } else {
      return (
        <NewCard onCancel={this.hideEditableCard} onAdd={this.addNewCard}/>
      );
    }
  };

  onDragStart = ({ payload }) => {
    const { handleDragStart } = this.props;
    if(handleDragStart) handleDragStart(payload.laneId, payload.laneId);
  };

  shouldAcceptDrop = sourceContainerOptions => {
    return (
      this.props.droppable &&
      sourceContainerOptions.groupName === this.groupName
    );
  };

  get groupName() {
    const { boardId } = this.props;
    return `TrelloBoard${boardId}Lane`;
  }

  onDragEnd = (laneId, result) => {
    const { handleDragEnd } = this.props;
    const { addedIndex, payload } = result;

    this.setState({ isDraggingOver: false });

    if (addedIndex != null) {
      this.props.dispatch(actions.moveItem({
        boardId: this.props.boardId,
        toLane: laneId,

        itemId: (() => { throw 'todo' })(),
        toPosition: addedIndex
      }));

      if (handleDragEnd) handleDragEnd(payload.laneId, payload.laneId, laneId, addedIndex, payload);
    }
  };

  renderDragContainer = isDraggingOver => {
    const {
      laneSortFunction,
      editable,
      hideCardDeleteIcon,
      tagStyle,
      cardStyle,
      draggable,
      cardDraggable,
      cards,
      cardDragClass,
      laneId
    } = this.props;
    const { addCardMode, collapsed } = this.state;
    const showableCards = collapsed ? [] : cards;
    const cardList = showableCards.map(
      (card, idx) => {
        const cardToRender = (
          <Card
            key={card.laneId}
            index={idx}
            customCardLayout={this.props.customCardLayout}
            customCard={this.props.children}
            tagStyle={tagStyle}
            cardStyle={cardStyle}
            removeCard={this.removeCard}
            onClick={e => this.handleCardClick(e, card)}
            onDelete={this.props.onCardDelete}
            editable={editable}
            hideCardDeleteIcon={hideCardDeleteIcon}
            card={card}
          />
        );
        return draggable && cardDraggable ? (
          <Draggable key={card.laneId}>{cardToRender}</Draggable>
        ) : (
          <span key={card.laneId}>{cardToRender}</span>
        );
      }
    );

    return (
      <ScrollableLane ref={this.laneDidMount} isDraggingOver={isDraggingOver}>
        <Container
          orientation="vertical"
          groupName={this.groupName}
          dragClass={cardDragClass}
          onDragStart={this.onDragStart}
          onDrop={e => this.onDragEnd(laneId, e)}
          onDragEnter={() => this.setState({ isDraggingOver: true })}
          onDragLeave={() => this.setState({ isDraggingOver: false })}
          shouldAcceptDrop={this.shouldAcceptDrop}
          getChildPayload={index => this.props.getCardDetails(laneId, index)}
        >
          {cardList}
        </Container>
        {editable && !addCardMode && this.renderAddCardLink()}
        {addCardMode && this.renderNewCard()}
      </ScrollableLane>
    );
  };

  removeLane = () => this.props.dispatch(actions.deleteLane({
    boardId: this.props.boardId,
    laneId: this.props.laneId,
  }));

  laneMenu = () => {
    return (
      <Popover
        className="menu"
        position="bottom"
        trigger={<MenuButton>â‹®</MenuButton>}
      >
        <LaneMenuHeader>
          <LaneMenuTitle>Lane actions</LaneMenuTitle>
          <DeleteWrapper>
            <GenDelButton>&#10006;</GenDelButton>
          </DeleteWrapper>
        </LaneMenuHeader>
        <LaneMenuContent>
          <LaneMenuItem onClick={this.removeLane}>Delete Lane...</LaneMenuItem>
        </LaneMenuContent>
      </Popover>
    );
  };

  renderHeader = () => {
    const { customLaneHeader, canAddLanes } = this.props;
    if (customLaneHeader) {
      const customLaneElement = React.cloneElement(customLaneHeader, {
        ...this.props
      });
      return <span>{customLaneElement}</span>;
    } else {
      const { title, label, titleStyle, labelStyle } = this.props;
      return (
        <LaneHeader onDoubleClick={this.toggleLaneCollapsed}>
          <Title style={titleStyle}>{title}</Title>
          {label && (
            <RightContent>
              <span style={labelStyle}>{label}</span>
            </RightContent>
          )}
          {canAddLanes && this.laneMenu()}
        </LaneHeader>
      );
    }
  };

  renderFooter = () => {
    const { collapsibleLanes, lane } = this.props;
    const { collapsed } = this.state;

    if (collapsibleLanes && lane.items.length > 0) {
      return (
        <LaneFooter onClick={this.toggleLaneCollapsed}>
          {collapsed ? <ExpandBtn/> : <CollapseBtn/>}
        </LaneFooter>
      );
    }
  };

  toggleLaneCollapsed = () => {
    if (this.props.collapsibleLanes) this.setState(state => ({ collapsed: !state.collapsed }));
  };

  render() {
    const { loading, isDraggingOver } = this.state;
    const {
      laneId,
      onLaneClick,
      onLaneScroll,
      onCardClick,
      onCardAdd,
      onCardDelete,
      ...otherProps
    } = this.props;
    const allClassNames = classNames(
      "react-trello-board",
      this.props.className || ""
    );
    return (
      <Section
        {...otherProps}
        key={laneId}
        onClick={() => onLaneClick && onLaneClick(laneId)}
        draggable={false}
        className={allClassNames}
      >
        {this.renderHeader()}


        {this.renderDragContainer(isDraggingOver)}

        {loading && <Loader/>}

        {this.renderFooter()}
      </Section>
    );
  }
}

const mapDispatchToProps = dispatch => ({
  dispatch,
  actions: bindActionCreators(laneActions, dispatch)
});

export default connect(
  null,
  mapDispatchToProps
)(Lane);
